image: $CI_ARTIFACTORY_URL_CLOUD_BASE/docker:18.09_vault_2
services:
  - $CI_ARTIFACTORY_URL_CLOUD_BASE/docker:18.09-dind
variables:
  DOCKER_DRIVER: overlay2

stages:
  - build
  - test

.get_variables_from_vault: &get_variables_from_vault  |
  date
  export VAULT_SKIP_VERIFY=true
  export VAULT_ADDR=$CI_VAULT_ADD
  vault status
  export VAULT_TOKEN="$(vault write -field=token auth/jwt/login role=artifactory jwt=$CI_JOB_JWT)"
  export CI_ARTIFACTORY_USER="$(vault kv get -field=login rec_public/prod/infra/artifactory/all_repos_read)"
  export CI_ARTIFACTORY_PASSWORD="$(vault kv get -field=password rec_public/prod/infra/artifactory/all_repos_read)"
  export CI_ARTIFACTORY_W_LOGIN="$(vault kv get -field=login rec_public/prod/infra/artifactory/all_repos_write)"
  export CI_ARTIFACTORY_W_PASSWORD="$(vault kv get -field=password rec_public/prod/infra/artifactory/all_repos_write)"
  export CI_SONARQUBE_URL="$(vault kv get -field=url rec_public/prod/infra/sonarqube/sonar_dev)"
  export CI_SONARQUBE_USER="$(vault kv get -field=login rec_public/prod/infra/sonarqube/sonar_dev)"
  export CI_SONARQUBE_PASSWORD="$(vault kv get -field=password rec_public/prod/infra/sonarqube/sonar_dev)"

build:
  stage: build
  except:
    - merge_requests
    - pushes
    - tags
    - triggers
    - schedules
  only:
    variables:
      - $RUN_TYPE == "build_image"
  before_script:
    - *get_variables_from_vault
  script:
    - docker login $CI_ARTIFACTORY_URL_CLOUD -u $CI_ARTIFACTORY_W_LOGIN -p $CI_ARTIFACTORY_W_PASSWORD
    - |
      docker build \
      --build-arg CI_ARTIFACTORY_USER="$CI_ARTIFACTORY_USER" \
      --build-arg CI_ARTIFACTORY_PASSWORD="$CI_ARTIFACTORY_PASSWORD" \
      --build-arg CI_BUILD_TAG="$CI_COMMIT_REF_SLUG-$CI_PIPELINE_ID" \
      --build-arg CI_ARTIFACTORY_URL="$CI_ARTIFACTORY_URL" \
      --build-arg CI_ARTIFACTORY_URL_CLOUD_BASE="$CI_ARTIFACTORY_URL_CLOUD_BASE" \
      -t $CI_ARTIFACTORY_URL_CLOUD/$CI_PROJECT_NAMESPACE/$CI_PROJECT_NAME .
    - docker push $CI_ARTIFACTORY_URL_CLOUD/$CI_PROJECT_NAMESPACE/$CI_PROJECT_NAME
    - echo DOCKER_IMAGE=$CI_ARTIFACTORY_URL_CLOUD/$CI_PROJECT_NAMESPACE/$CI_PROJECT_NAME >> build.env
  artifacts:
    reports:
      dotenv: build.env

# Запускаем тесты
run_regression_tests_job: #Test_&_send:
  stage: test
  image:
    name: $CI_ARTIFACTORY_URL_CLOUD/$CI_PROJECT_NAMESPACE/$CI_PROJECT_NAME:latest
    entrypoint: [""]  # Переопределение "точки входа" в контейнер который запускается ранером при сборке
  except:
    - merge_requests
    - pushes
    - tags
    - triggers
    - schedules
  only:
    variables:
      - $RUN_TYPE == "testng"
  artifacts:          # Имеет смысл в случае ошибки при выполнении теста результат пихать в артефакты гитлаба для анализа
    expire_in: 1 days
    when: on_failure
    paths:
      - mvn/**/*
      - result.json
  before_script:
    - *get_variables_from_vault
#    - mkdir -p /share && mount.cifs //10.5.1.87/share /share -o username=share,password=aij7zieYAeng2gee,file_mode=0766,dir_mode=0766
    - export TZ=Europe/Moscow
  script:
    - echo $RUN_TYPE
    - whoami
    - chmod +x ./send_results.sh
    - mvn test -Dsurefire.suiteXmlFiles=testng.xml || echo "[ERROR] Выполнение тестов завершилось с ошибкой"
    - ./send_results.sh || echo "[ERROR] Отправка результатов в Allure завершилась с ошибкой"
